% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assist.R
\name{DAGassist}
\alias{DAGassist}
\title{Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text)}
\usage{
DAGassist(
  dag,
  formula,
  data,
  exposure,
  outcome,
  engine = stats::lm,
  labels = NULL,
  verbose = TRUE,
  type = c("console", "latex", "word", "docx", "excel", "xlsx", "text", "txt"),
  out = NULL,
  imply = FALSE,
  omit_intercept = TRUE,
  omit_factors = TRUE,
  engine_args = list()
)
}
\arguments{
\item{dag}{A \strong{dagitty} object (see \code{\link[dagitty:dagitty]{dagitty::dagitty()}}).}

\item{formula}{Either (a) a standard model formula \code{Y ~ X + ...}, or
(b) a single \strong{engine call} such as \code{feols(Y ~ X + Z | fe, data = df, ...)}.
When an engine call is provided, \code{engine}, \code{data}, and extra arguments are
automatically extracted from the call.}

\item{data}{A \code{data.frame} (or compatible--e.g. tibble); optional if supplied via the
engine call in \code{formula}.}

\item{exposure}{Optional character scalar; if missing/empty, inferred from the
DAG (must be unique).}

\item{outcome}{Optional character scalar; if missing/empty, inferred from the
DAG (must be unique).}

\item{engine}{Modeling function, default \link[stats:lm]{stats::lm}. Ignored if \code{formula}
is a single engine call (in that case the function is taken from the call).}

\item{labels}{optional variable labels. can be named char vector or df or unnamed
char vector}

\item{verbose}{Logical (default \code{TRUE}). Controls verbosity in the console
printer (formulas + notes).}

\item{type}{Output type. One of
\code{"console"} (default), \code{"latex"}/\code{"docx"}/\code{"word"},
\code{"excel"}/\code{"xlsx"}, \code{"text"}/\code{"txt"}.}

\item{out}{Output file path for the non-console types:
\itemize{
\item \code{type="latex"}: a \strong{LaTeX fragment} written to \code{out} (must end with \code{.tex}).
\item \code{type="docx"}/\code{"word"}: a \strong{Word (.docx)} file written to \code{out}.
\item \code{type="excel"}/\code{"xlsx"}: an \strong{Excel (.xlsx)} file written to \code{out}.
\item \code{type="text"}/\code{"txt"}: a \strong{plain-text} file written to \code{out}.
Ignored for \code{type="console"}.
}}

\item{imply}{Logical; default \code{FALSE}. If \code{TRUE}, \code{DAGassist()} only evaluates
variables listed in the \code{formula} argument.}

\item{omit_intercept}{logical; drop the intercept rows from output. Default TRUE.}

\item{omit_factors}{logical; drop all factor-level rows. Default TRUE.}

\item{engine_args}{Named list of extra arguments forwarded to \code{engine(...)}.
If \code{formula} is an engine call, arguments from the call are merged with
\code{engine_args} (call values take precedence).}
}
\value{
An object of class \code{"DAGassist_report"}, invisibly for file outputs,
and printed for \code{type="console"}. The list contains:
\itemize{
\item \code{validation} — result from internal \code{validate_spec(...)} (includes \code{ok}).
\item \code{roles} — roles data.frame from \code{classify_nodes(...)}.
\item \code{bad_in_user} — variables in user controls that are mediator/collider/descendant of outcome.
\item \code{controls_minimal} — (legacy) one minimal set (character vector).
\item \code{controls_minimal_all} — list of all minimal sets (character vectors).
\item \code{controls_canonical} — canonical set (character vector; may be empty).
\item \code{formulas} — list with \code{original}, \code{minimal}, \code{minimal_list}, \code{canonical}.
\item \code{models} — list with fitted models \code{original}, \code{minimal}, \code{minimal_list}, \code{canonical}.
\item \code{verbose}, \code{imply} — flags as provided.
}
}
\description{
\code{DAGassist()} validates a DAG + model specification, classifies node roles,
builds minimal and canonical adjustment sets, fits comparable models, and
renders a compact report in several formats (console, LaTeX fragment, DOCX,
XLSX, plain text). It also supports passing a \strong{single engine call} (e.g.
\code{feols(Y ~ X + Z | fe, data = df)}) instead of a plain formula.
}
\details{
\strong{Engine-call parsing.} If \code{formula} is a call (e.g., \code{feols(Y ~ X | fe, data=df)}),
DAGassist extracts the engine function, the formula, the data argument, and
any additional engine arguments directly from that call; these are merged with
\code{engine}/\code{engine_args} you pass explicitly (call arguments win).

\strong{Fixest tails.} For engines like \strong{fixest} that use \code{|} to denote FE/IV
parts, DAGassist preserves any \verb{| ...} “tail” when constructing minimal or
canonical formulas (e.g., \code{Y ~ X + controls | fe | iv(...)}).

\strong{Output types.}
\itemize{
\item \code{console} prints* roles, sets, formulas (if \code{verbose}), and a compact model
comparison with \code{{modelsummary}} if available, then falls back gracefully.
\item \code{latex} writes a \strong{LaTeX fragment} you can \verb{\\input\{\}} into a paper.
\item \code{docx}/\code{word} writes a \strong{Word} doc via Pandoc. It will use a reference
document if set via \code{options(DAGassist.ref_docx="path/to/ref.docx")}, else
falls back to a bundled or default reference DOCX, else Pandoc defaults.
\item \code{excel}/\code{xlsx} writes an \strong{Excel} workbook with tidy tables.
\item \code{text}/\code{txt} writes a \strong{plain-text} report suitable for logs/notes.

\strong{Dependencies.} Minimal core requires \code{{dagitty}}. Optional enhancements:
\code{{modelsummary}} (pretty tables), \code{{broom}} (fallback tidying), \code{{rmarkdown}}
}
\itemize{
\item \strong{Pandoc} (DOCX), \code{{writexl}} (XLSX).
}
}
\section{Errors and edge cases}{

\itemize{
\item If exposure/outcome cannot be inferred uniquely, the function stops with a clear message.
\item Fitting errors (e.g., FE collinearity) are captured and displayed in comparisons
without aborting the whole pipeline.
}
}

\examples{
\dontshow{if (requireNamespace("dagitty", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
\dontshow{set.seed(1)}
\dontshow{
# Build the DAG directly with dagitty
g <- dagitty::dagitty("dag { Z -> X; X -> M; X -> Y; M -> Y; Z -> Y; A -> Y; B -> Y; X -> C; Y -> C }")
dagitty::exposures(g) <- "X"; dagitty::outcomes(g) <- "Y"

n <- 150
A <- rnorm(n); B <- rnorm(n); Z <- rnorm(n)
X <- 0.8*Z + rnorm(n)
M <- 0.9*X + rnorm(n)
Y <- 0.7*X + 0.6*M + 0.3*Z + 0.2*A - 0.1*B + rnorm(n)
C <- 0.5*X + 0.4*Y + rnorm(n)
df <- data.frame(A,B,Z,X,M,Y,C)
}
# generate a console DAGassist report
DAGassist(dag = g, formula = lm(Y ~ X + Z + C + M, data = df))

# generate a LaTeX DAGassist report
\donttest{
DAGassist(dag = g, formula = lm(Y ~ X + Z + C + M, data = df),
          type = "latex", out = file.path(tempdir(), "frag.tex"))
}
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link[=print.DAGassist_report]{print.DAGassist_report()}} for the console printer, and the helper
exporters in \verb{report_*} modules.
}
