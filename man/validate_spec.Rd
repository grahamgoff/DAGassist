% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{validate_spec}
\alias{validate_spec}
\title{Validate dag, formula, data before fitting and ensure exposure and outcome are
specified}
\usage{
validate_spec(dag, formula, data, exposure, outcome)
}
\arguments{
\item{dag}{A \code{dagitty} DAG object.}

\item{formula}{a regression call}

\item{data}{data frame}

\item{exposure}{Character; exposure node name (X).}

\item{outcome}{Character; outcome node name (Y).}
}
\value{
A list of class \code{DAGassist_validation} with values:
\code{ok} (logical), \code{issues} (data.frame), \code{vars} (list)
}
\description{
Validate dag, formula, data before fitting and ensure exposure and outcome are
specified
}
\examples{
# Load small demo DAG and data shipped with the package
data(test_complex, package = "DAGassist")
data(test_df,      package = "DAGassist")

# example of what to do: everything present and consistent
v_ok <- validate_spec(test_complex, Y ~ X + Z, test_df,
                      exposure = "X", outcome = "Y")
v_ok

##common mistake: a variable in the formula is missing from the data
partial_df <- test_df[c("Y", "X")]
v_missing <- validate_spec(test_complex, Y ~ X + Z, partial_df,
                           exposure = "X", outcome = "Y")
v_missing

##another common issue: exposure not on the right-hand side (warns)
v_warn <- validate_spec(test_complex, Y ~ Z, test_df,
                        exposure = "X", outcome = "Y")
v_warn

# 4) (Not run) Example that would error: DAG is not a dagitty object
# \dontrun{
#   validate_spec(list(), Y ~ X, test_df, exposure = "X", outcome = "Y")
# }

}
