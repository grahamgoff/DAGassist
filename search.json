[{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://grahamgoff.github.io/DAGassist/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with Report Creation","text":"vignette explains make publication-grade DAGassist reports LaTeX, Word, Excel, plaintext. Since package’s primary utility robustness check observational studies, functionality revolves around creating reports.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"install","dir":"Articles","previous_headings":"Introduction","what":"Install","title":"Getting Started with Report Creation","text":"","code":"install.packages(\"pak\") pak::pak(\"grahamgoff/DAGassist\")"},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Getting Started with Report Creation","text":"addition loading DAGassist, load following baseline packages: LaTeX uses broom fallback report generation knitr build intermediate .md Word plaintext report generation. rmarkdown convert .md files .docx files Word report generation. writexl export Excel files. Essentially, export: LaTeX needs modelsummary Excel needs modelsummary writexl plaintext needs modelsummary knitr Word needs modelsummary, knitr, rmarkdown","code":"#load DAGassist library(DAGassist)  #load libraries to help export library(modelsummary) library(writexl) library(knitr) library(rmarkdown)"},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"example-dag","dir":"Articles","previous_headings":"Introduction","what":"Example DAG","title":"Getting Started with Report Creation","text":"purposes tutorial, working slight variation Figure 1.2 “Counterfactuals Causal Inference”.  data, simulates DAG relationships:","code":"head(df) #>            Y          D          H          A           G          F #> 1 -4.3598990 -1.7293707 -1.2908129 -0.3906503 -0.15030748 -0.5116037 #> 2  1.6129050  1.0748492  0.2956294  0.6771872 -0.32775713  0.2369379 #> 3  1.5096451  1.0922811 -1.1613337  1.1254048 -1.44816529 -0.5415892 #> 4  1.1554071 -0.5867292  1.3752785 -0.5173670 -0.69728458  1.2192276 #> 5  0.2920729 -2.0225129 -1.1232830 -1.8569842  2.59849023  0.1741359 #> 6  3.1428430  3.0900447  1.1675898  2.6936976 -0.03741501 -0.6152683 #>             C           B #> 1 -0.99579872 -0.56047565 #> 2 -1.03995504 -0.23017749 #> 3 -0.01798024  1.55870831 #> 4 -0.13217513  0.07050839 #> 5 -2.54934277  0.12928774 #> 6  1.04057346  1.71506499"},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"creating-a-report","dir":"Articles","previous_headings":"Introduction","what":"Creating a report","title":"Getting Started with Report Creation","text":"Suppose wrote article uses model original main finding, want ensure specification captures total effect D Y, without mediator collider bias. DAGassist can generate report assessing causal roles variables original. DAGassist Report:","code":"original <- lm(Y ~ D + G + H + F + A + B + C, data = df) DAGassist(dag = dag_model, #specify a dagitty or ggdag object           formula = lm(Y ~ D + G + H + F + A + B + C, data = df), #provide your formula           type = \"text\", #output type           out = out_txt) #a temporary directory, for the purpose of this vignette  cat(readLines(out_txt), sep = \"\\n\") # show the output"},{"path":[]},{"path":[]},{"path":"https://grahamgoff.github.io/DAGassist/articles/making-reports.html","id":"notes","dir":"Articles","previous_headings":"Introduction","what":"Notes","title":"Getting Started with Report Creation","text":"p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001. Controls (minimal): {F, H} Controls (canonical): {, B, C, F, G, H}.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Graham Goff. Author, maintainer.            Dept. International Affairs, Texas &M University Michael Denly. Contributor.            Dept. International Affairs, Texas &M University","code":""},{"path":"https://grahamgoff.github.io/DAGassist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goff G (2025). DAGassist: DAG-Driven Robustness Checks R. R package version 0.2.1.0, https://github.com/grahamgoff/DAGassist.","code":"@Manual{,   title = {DAGassist: DAG-Driven Robustness Checks for R},   author = {Graham Goff},   year = {2025},   note = {R package version 0.2.1.0},   url = {https://github.com/grahamgoff/DAGassist}, }"},{"path":"https://grahamgoff.github.io/DAGassist/index.html","id":"dagassist","dir":"","previous_headings":"","what":"DAG-Driven Robustness Checks for R","title":"DAG-Driven Robustness Checks for R","text":"--one DAG-driven robustness check. Classify variables causal role, compute smallest largest permissible back-door adjustment sets, compare significance models. See Making Reports vignette details producing publication-quality DAGassist reports LaTex, Word, Excel, plaintext.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DAG-Driven Robustness Checks for R","text":"can install development version DAGassist GitHub :","code":"install.packages(\"pak\") pak::pak(\"grahamgoff/DAGassist\")  #load the library library(DAGassist)"},{"path":"https://grahamgoff.github.io/DAGassist/index.html","id":"quick-start-console","dir":"","previous_headings":"","what":"Quick start (console)","title":"DAG-Driven Robustness Checks for R","text":"","code":"DAGassist(dag = test_complex,            formula = feols(Y ~ X + Z + B + A + C + M | region + time, data = test_df)) DAGassist Report:   Roles: variable  role        X  Y  conf  med  col  desc(Y)  desc(X) X         exposure    x                                      Y         outcome        x                           x       Z         confounder        x                                M         mediator                x                  x       C         collider                     x    x        x       A         other                                              B         other                                                (!) Bad controls in your formula: {C, M} Minimal controls 1: {Z} Canonical controls: {A, B, Z}  Formulas:   original:  Y ~ X + Z + B + A + C + M | region + time  Model comparison:  +------------+----------+-----------+-----------+ |            | Original | Minimal 1 | Canonical | +============+==========+===========+===========+ | X          | -0.026   | 1.416***  | 1.449***  | +------------+----------+-----------+-----------+ |            | (0.100)  | (0.066)   | (0.059)   | +------------+----------+-----------+-----------+ | Z          | 0.304*** | 0.535***  | 0.532***  | +------------+----------+-----------+-----------+ |            | (0.045)  | (0.071)   | (0.072)   | +------------+----------+-----------+-----------+ | B          | 0.037    |           | 0.005     | +------------+----------+-----------+-----------+ |            | (0.037)  |           | (0.053)   | +------------+----------+-----------+-----------+ | A          | -0.045   |           | 0.278***  | +------------+----------+-----------+-----------+ |            | (0.026)  |           | (0.031)   | +------------+----------+-----------+-----------+ | C          | 0.627*** |           |           | +------------+----------+-----------+-----------+ |            | (0.030)  |           |           | +------------+----------+-----------+-----------+ | M          | 0.308*** |           |           | +------------+----------+-----------+-----------+ |            | (0.050)  |           |           | +------------+----------+-----------+-----------+ | Num.Obs.   | 400      | 400       | 400       | +------------+----------+-----------+-----------+ | R2         | 0.941    | 0.838     | 0.851     | +------------+----------+-----------+-----------+ | FE: region | X        | X         | X         | +------------+----------+-----------+-----------+ | FE: time   | X        | X         | X         | +============+==========+===========+===========+ | + p < 0.1, * p < 0.05, ** p < 0.01, *** p <   | | 0.001                                         | +============+==========+===========+===========+"},{"path":"https://grahamgoff.github.io/DAGassist/index.html","id":"export-your-results-in-latex-word-excel-or-plain-text","dir":"","previous_headings":"","what":"Export your results in LaTeX, Word, Excel, or plain text","title":"DAG-Driven Robustness Checks for R","text":"","code":"DAGassist(    test_complex, Y ~ X + Z + C + M + A + B, test_df,   type = \"latex\", out = \"man/figures/README-latex.tex\" )"},{"path":"https://grahamgoff.github.io/DAGassist/index.html","id":"controlling-dag-based-additions","dir":"","previous_headings":"","what":"Controlling DAG-based additions","title":"DAG-Driven Robustness Checks for R","text":"default imply = FALSE variables added spec based relationships DAG. Set imply = TRUE get complete minimal canonical adjustment sets, based DAG.","code":"DAGassist(   dag = test_complex,   formula = lm(Y~X+C, data = test_df),   imply = TRUE ) DAGassist Report:   Roles: variable  role        X  Y  conf  med  col  desc(Y)  desc(X) X         exposure    x                                      Y         outcome        x                           x       Z         confounder        x                                M         mediator                x                  x       C         collider                     x    x        x       A         other                                              B         other                                                (!) Bad controls in your formula: {C} Minimal controls 1: {Z} Canonical controls: {A, B, Z}  Formulas:   original:  Y ~ X + C   minimal 1 : Y ~ X + Z   canonical: Y ~ X + A + B + Z  Note: DAGassist added variables not in your formula, based on the relationships in your DAG, to block back-door paths between X and Y.   - Minimal 1 added: {Z}   - Canonical added: {A, B, Z}  Model comparison:  +-------------+----------+-----------+-----------+ |             | Original | Minimal 1 | Canonical | +=============+==========+===========+===========+ | (Intercept) | 0.012    | -0.004    | 0.019     | +-------------+----------+-----------+-----------+ |             | (0.031)  | (0.047)   | (0.045)   | +-------------+----------+-----------+-----------+ | X           | 0.146*   | 1.423***  | 1.457***  | +-------------+----------+-----------+-----------+ |             | (0.074)  | (0.076)   | (0.073)   | +-------------+----------+-----------+-----------+ | C           | 0.752*** |           |           | +-------------+----------+-----------+-----------+ |             | (0.030)  |           |           | +-------------+----------+-----------+-----------+ | Z           |          | 0.522***  | 0.518***  | +-------------+----------+-----------+-----------+ |             |          | (0.078)   | (0.075)   | +-------------+----------+-----------+-----------+ | A           |          |           | 0.286***  | +-------------+----------+-----------+-----------+ |             |          |           | (0.047)   | +-------------+----------+-----------+-----------+ | B           |          |           | 0.011     | +-------------+----------+-----------+-----------+ |             |          |           | (0.044)   | +-------------+----------+-----------+-----------+ | Num.Obs.    | 400      | 400       | 400       | +-------------+----------+-----------+-----------+ | R2          | 0.926    | 0.832     | 0.846     | +=============+==========+===========+===========+ | + p < 0.1, * p < 0.05, ** p < 0.01, *** p <    | | 0.001                                          | +=============+==========+===========+===========+"},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"DAGassist() validates DAG + model specification, classifies node roles, builds minimal canonical adjustment sets, fits comparable models, renders compact report several formats (console, LaTeX fragment, DOCX, XLSX, plain text). also supports passing single engine call (e.g. feols(Y ~ X + Z | fe, data = df)) instead plain formula.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"","code":"DAGassist(   dag,   formula,   data,   exposure,   outcome,   engine = stats::lm,   engine_args = list(),   labels = NULL,   verbose = TRUE,   type = c(\"console\", \"latex\", \"word\", \"docx\", \"excel\", \"xlsx\", \"text\", \"txt\"),   out = NULL,   imply = FALSE )"},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"dag dagitty object (see dagitty::dagitty()). formula Either () standard model formula Y ~ X + ..., (b) single engine call feols(Y ~ X + Z | fe, data = df, ...). engine call provided, engine, data, extra arguments automatically extracted call. data data.frame (compatible–e.g. tibble); optional supplied via engine call formula. exposure Optional character scalar; missing/empty, inferred DAG (must unique). outcome Optional character scalar; missing/empty, inferred DAG (must unique). engine Modeling function, default stats::lm. Ignored formula single engine call (case function taken call). engine_args Named list extra arguments forwarded engine(...). formula engine call, arguments call merged engine_args (call values take precedence). labels optional variable labels. can named char vector df unnamed char vector verbose Logical (default TRUE). Controls verbosity console printer (formulas + notes). type Output type. One \"console\" (default), \"latex\"/\"docx\"/\"word\", \"excel\"/\"xlsx\", \"text\"/\"txt\". Output file path non-console types: type=\"latex\": LaTeX fragment written (must end .tex). type=\"docx\"/\"word\": Word (.docx) file written . type=\"excel\"/\"xlsx\": Excel (.xlsx) file written . type=\"text\"/\"txt\": plain-text file written . Ignored type=\"console\". imply Logical; TRUE, DAGassist highlights variables added DAG logic (minimal/canonical sets) notes marks canonical roles roles table. Models always fit minimal/canonical allow side--side comparison, regardless imply.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"object class \"DAGassist_report\", invisibly file outputs, printed type=\"console\". list contains: validation — result internal validate_spec(...) (includes ok). roles — roles data.frame classify_nodes(...). bad_in_user — variables user controls mediator/collider/descendant outcome. controls_minimal — (legacy) one minimal set (character vector). controls_minimal_all — list minimal sets (character vectors). controls_canonical — canonical set (character vector; may empty). formulas — list original, minimal, minimal_list, canonical. models — list fitted models original, minimal, minimal_list, canonical. verbose, imply — flags provided.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"Engine-call parsing. formula call (e.g., feols(Y ~ X | fe, data=df)), DAGassist extracts engine function, formula, data argument, additional engine arguments directly call; merged engine/engine_args pass explicitly (call arguments win). Fixest tails. engines like fixest use | denote FE/IV parts, DAGassist preserves | ... “tail” constructing minimal canonical formulas (e.g., Y ~ X + controls | fe | iv(...)). Output types. console prints* roles, sets, formulas (verbose), compact model comparison {modelsummary} available, falls back gracefully. latex writes LaTeX fragment can \\input{} paper. docx/word writes Word doc via Pandoc. use reference document set via options(DAGassist.ref_docx=\"path//ref.docx\"), else falls back bundled default reference DOCX, else Pandoc defaults. excel/xlsx writes Excel workbook tidy tables. text/txt writes plain-text report suitable logs/notes. Dependencies. Minimal core requires {dagitty}. Optional enhancements: {modelsummary} (pretty tables), {broom} (fallback tidying), {rmarkdown} Pandoc (DOCX), {writexl} (XLSX).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"errors-and-edge-cases","dir":"Reference","previous_headings":"","what":"Errors and edge cases","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"exposure/outcome inferred uniquely, function stops clear message. Fitting errors (e.g., FE collinearity) captured displayed comparisons without aborting whole pipeline.","code":""},{"path":[]},{"path":"https://grahamgoff.github.io/DAGassist/reference/DAGassist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the DAGassist pipeline and produce a compact report (console/LaTeX/Word/Excel/Text) — DAGassist","text":"","code":"# Package example data: data(test_df, package = \"DAGassist\") data(test_complex, package = \"DAGassist\")  # Basic console report DAGassist(test_complex, Y ~ X + Z + C + M, data = test_df,           exposure = \"X\", outcome = \"Y\") #> DAGassist Report:  #>  #> Roles: #> variable  role        X  Y  conf  med  col  desc(Y)  desc(X) #> X         exposure    x                                      #> Y         outcome        x                           x       #> Z         confounder        x                                #> M         mediator                x                  x       #> C         collider                     x    x        x       #> A         other                                              #> B         other                                              #>  #>  (!) Bad controls in your formula: {C, M} #> Minimal controls 1: {Z} #> Canonical controls: {A, B, Z} #>  #> Formulas: #>   original:  Y ~ X + Z + C + M #>  #> Model comparison: #>  #> +-------------+----------+-----------+-----------+ #> |             | Original | Minimal 1 | Canonical | #> +=============+==========+===========+===========+ #> | (Intercept) | 0.020    | -0.004    | 0.019     | #> +-------------+----------+-----------+-----------+ #> |             | (0.028)  | (0.047)   | (0.045)   | #> +-------------+----------+-----------+-----------+ #> | X           | 0.017    | 1.423***  | 1.457***  | #> +-------------+----------+-----------+-----------+ #> |             | (0.073)  | (0.076)   | (0.073)   | #> +-------------+----------+-----------+-----------+ #> | Z           | 0.294*** | 0.522***  | 0.518***  | #> +-------------+----------+-----------+-----------+ #> |             | (0.050)  | (0.078)   | (0.075)   | #> +-------------+----------+-----------+-----------+ #> | C           | 0.621*** |           |           | #> +-------------+----------+-----------+-----------+ #> |             | (0.032)  |           |           | #> +-------------+----------+-----------+-----------+ #> | M           | 0.290*** |           |           | #> +-------------+----------+-----------+-----------+ #> |             | (0.041)  |           |           | #> +-------------+----------+-----------+-----------+ #> | A           |          |           | 0.286***  | #> +-------------+----------+-----------+-----------+ #> |             |          |           | (0.047)   | #> +-------------+----------+-----------+-----------+ #> | B           |          |           | 0.011     | #> +-------------+----------+-----------+-----------+ #> |             |          |           | (0.044)   | #> +-------------+----------+-----------+-----------+ #> | Num.Obs.    | 400      | 400       | 400       | #> +-------------+----------+-----------+-----------+ #> | R2          | 0.938    | 0.832     | 0.846     | #> +=============+==========+===========+===========+ #> | + p < 0.1, * p < 0.05, ** p < 0.01, *** p <    | #> | 0.001                                          | #> +=============+==========+===========+===========+   # Engine-call parsing (fixest example, if available): if (FALSE) { # \\dontrun{ DAGassist(test_complex,           fixest::feols(Y ~ X + Z | C, data = test_df),           exposure = \"X\", outcome = \"Y\",           type = \"docx\", out = \"report.docx\") } # }"},{"path":"https://grahamgoff.github.io/DAGassist/reference/bad_controls_in.html","id":null,"dir":"Reference","previous_headings":"","what":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","title":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","text":"flag bad controls (mediator/collider/desc Y) among candidate set","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/bad_controls_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","text":"","code":"bad_controls_in(dag, controls, exposure, outcome)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/bad_controls_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","text":"dag dagitty DAG object. controls Character vector variable names. exposure Character; exposure node name (X). outcome Character; outcome node name (Y).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/bad_controls_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","text":"character vector (possibly empty) containing elements controls identified \"bad controls\". essentially inverse pick_minimal_controls(), returns bad controls, rather minimal/canonical set good controls","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/bad_controls_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flag bad controls (mediator/collider/desc of Y) among a candidate set — bad_controls_in","text":"","code":"d <- ggdag::dagify( Y ~ X + M + Z, M ~ X + Z, C ~ X + Y, exposure = \"X\", outcome = \"Y\") # M: mediator / Z: confounder / C: collider  # hypothetical candidate controls controls <- c(\"Z\", \"M\", \"C\")  # Flag controls that would bias the total effect of X on Y: bad_controls_in(d, controls = c(\"Z\",\"M\",\"C\"), exposure = \"X\", outcome = \"Y\") #> [1] \"M\" \"C\"  # expected: c(\"M\", \"C\")  # mediator & collider are \"bad controls\"; Z is OK"},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify DAG nodes — classify_nodes","title":"Classify DAG nodes — classify_nodes","text":"Labels node one : exposure, outcome, confounder, mediator, collider, descendant_of_outcome, .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify DAG nodes — classify_nodes","text":"","code":"classify_nodes(dag, exposure, outcome)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify DAG nodes — classify_nodes","text":"dag dagitty DAG object. exposure Optional– inferred DAG set; character; exposure node name (X). outcome Optional– inferred DAG set; character; outcome node name (Y).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify DAG nodes — classify_nodes","text":"data.frame one row per node columns: variable (node name) logical flags: is_exposure, is_outcome, is_confounder, is_mediator, is_collider, is_descendant_of_outcome, is_descendant_of_exposure role (single primary label)","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify DAG nodes — classify_nodes","text":"label definitions confounder – ancestor X Y, descendant X mediator – descendant X ancestor Y collider – node 2 parents X / Y path (non-structural) descendant_of_outcome – descendant Y exposure / outcome labeled explicitly function call Notes: definitions, x exposure y outcome structural colliders calculated, define non-structural. structural colliders included boolean flag node may satisfy multiple properties; also return boolean flags property. role column gives single \"primary\" label using precedence defined .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/classify_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify DAG nodes — classify_nodes","text":"","code":"d1 <- dagitty::dagitty(\"dag { Z -> X; Z -> Y; X -> Y }\") # confounder Z   classify_nodes(d1, exposure = \"X\", outcome = \"Y\") #> variable  role        X  Y  conf  med  col  desc(Y)  desc(X) #> X         exposure    x                                      #> Y         outcome        x                           x       #> Z         confounder        x                                   d2 <- dagitty::dagitty(\"dag { X -> M -> Y }\") # mediator M   classify_nodes(d2, \"X\", \"Y\") #> variable  role       X  Y  conf  med  col  desc(Y)  desc(X) #> X         exposure   x                                      #> Y         outcome       x                           x       #> M         mediator               x                  x          d3 <- dagitty::dagitty(\"dag { X -> C <- Y }\") # collider C   classify_nodes(d3, \"X\", \"Y\") #> variable  role       X  Y  conf  med  col  desc(Y)  desc(X) #> X         exposure   x                                      #> Y         outcome       x                                   #> C         collider                    x    x        x"},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare original vs minimal adjustment specification — compare_specs","title":"Compare original vs minimal adjustment specification — compare_specs","text":"Fits user-supplied model minimal-adjustment model (via dagitty::adjustmentSets()), validating inputs.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare original vs minimal adjustment specification — compare_specs","text":"","code":"compare_specs(   dag,   formula,   data,   exposure,   outcome,   engine = stats::lm,   engine_args = list() )"},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare original vs minimal adjustment specification — compare_specs","text":"dag dagitty DAG. formula model formula (e.g., Y ~ X + Z). data data.frame variables used formula. exposure Character; exposure variable name. outcome Character; outcome variable name. engine fitting function (default stats::lm). engine_args List extra arguments passed engine.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare original vs minimal adjustment specification — compare_specs","text":"object class DAGassist_compare elements: validation, original, minimal, controls, formulas.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare original vs minimal adjustment specification — compare_specs","text":"want edit works fixed/random effects common uses. eventually want make sure works everything","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/compare_specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare original vs minimal adjustment specification — compare_specs","text":"","code":"# compare_specs(test_confounder, Y ~ X + Z, test_df, \"X\", \"Y\")"},{"path":"https://grahamgoff.github.io/DAGassist/reference/partial_test_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial demo data (missing some variables) — partial_test_df","title":"Partial demo data (missing some variables) — partial_test_df","text":"Partial demo data (missing variables)","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/partial_test_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial demo data (missing some variables) — partial_test_df","text":"","code":"partial_test_df"},{"path":"https://grahamgoff.github.io/DAGassist/reference/partial_test_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Partial demo data (missing some variables) — partial_test_df","text":"data frame 3 variables: X, Y, Z.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/partial_test_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Partial demo data (missing some variables) — partial_test_df","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"compute minimal adjustment sets pick one deterministically","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"","code":"pick_minimal_controls(dag, exposure, outcome)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"dag dagitty DAG object. exposure Character; exposure node name (X). outcome Character; outcome node name (Y).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"sorted character vector minimal adjustment set","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"preferable dagitty::adjustmentSets() picks single minimal adjustment set automatically without bunch arguments. need adapt deal multiple adjustment sets canonical adjustment sets eventually.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pick_minimal_controls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute minimal adjustment sets and pick one deterministically — pick_minimal_controls","text":"","code":"d <- ggdag::dagify( Y ~ X + M + Z, M ~ X + Z, C ~ X + Y, exposure = \"X\", outcome = \"Y\") # M: mediator / Z: confounder / C: collider  # identify the minimal adjustment set pick_minimal_controls(d, exposure = \"X\", outcome = \"Y\") #> character(0) # expected: \"Z\""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://grahamgoff.github.io/DAGassist/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints a concise comparison report — print.DAGassist_compare","title":"Prints a concise comparison report — print.DAGassist_compare","text":"Prints concise comparison report","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints a concise comparison report — print.DAGassist_compare","text":"","code":"# S3 method for class 'DAGassist_compare' print(x, ...)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints a concise comparison report — print.DAGassist_compare","text":"x DAGassist_compare object returned compare_specs(). ... Ignored.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints a concise comparison report — print.DAGassist_compare","text":"Invisibly returns x.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prints a concise comparison report — print.DAGassist_compare","text":"Prints output compare_specs(), showing validation status, minimal controls, original/minimal formulas, compact coefficient formula.  may want clean kable latex output later. maybe wrap capture.output since uses cat.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints a concise comparison report — print.DAGassist_compare","text":"","code":"set.seed(1) d <- dagitty::dagitty(\"dag { Z -> X; Z -> Y; X -> Y }\") n <- 100 Z <- rnorm(n); X <- 0.8*Z + rnorm(n); Y <- 1.2*X + 0.5*Z + rnorm(n) df <- data.frame(Y, X, Z) cmp <- compare_specs(d, Y ~ X + Z, df, exposure = \"X\", outcome = \"Y\") print(cmp) #> DAGassist compare #> Validation: VALID #>  #> Controls (minimal): {Z} #>  #> Formulas: #>   original: Y ~ X + Z #>   minimal : Y ~ X + Z #>  #> Original fit (coef head): #>               Estimate Std. Error    t value     Pr(>|t|) #> (Intercept) 0.02535343  0.1051941  0.2410157 8.100516e-01 #> X           1.14653318  0.1094785 10.4726744 1.282313e-17 #> Z           0.56388362  0.1458822  3.8653355 2.005880e-04 #>  #> Minimal  fit (coef head): #>               Estimate Std. Error    t value     Pr(>|t|) #> (Intercept) 0.02535343  0.1051941  0.2410157 8.100516e-01 #> X           1.14653318  0.1094785 10.4726744 1.282313e-17 #> Z           0.56388362  0.1458822  3.8653355 2.005880e-04"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for DAGassist reports — print.DAGassist_report","title":"Print method for DAGassist reports — print.DAGassist_report","text":"Nicely prints roles table, highlights potential bad controls, shows minimal/canonical adjustment sets, optionally shows formulas, renders compact model comparison (using {modelsummary} available, falling back {broom} basic coef() preview).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for DAGassist reports — print.DAGassist_report","text":"","code":"# S3 method for class 'DAGassist_report' print(x, ...)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for DAGassist reports — print.DAGassist_report","text":"x \"DAGassist_report\" object returned DAGassist(). ... Additional arguments (currently unused; present S3 compatibility).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for DAGassist reports — print.DAGassist_report","text":"Invisibly returns x.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for DAGassist reports — print.DAGassist_report","text":"printer respects verbose flag report: TRUE, includes formulas brief note variables added DAG logic (minimal canonical sets). Fitting errors shown inline per model column abort printing.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for DAGassist reports — print.DAGassist_report","text":"","code":"data(test_df, package = \"DAGassist\") data(test_complex, package = \"DAGassist\") r <- DAGassist(test_complex, Y ~ X + Z + C + M, data = test_df,                exposure = \"X\", outcome = \"Y\") print(r) #> DAGassist Report:  #>  #> Roles: #> variable  role        X  Y  conf  med  col  desc(Y)  desc(X) #> X         exposure    x                                      #> Y         outcome        x                           x       #> Z         confounder        x                                #> M         mediator                x                  x       #> C         collider                     x    x        x       #> A         other                                              #> B         other                                              #>  #>  (!) Bad controls in your formula: {C, M} #> Minimal controls 1: {Z} #> Canonical controls: {A, B, Z} #>  #> Formulas: #>   original:  Y ~ X + Z + C + M #>  #> Model comparison: #>  #> +-------------+----------+-----------+-----------+ #> |             | Original | Minimal 1 | Canonical | #> +=============+==========+===========+===========+ #> | (Intercept) | 0.020    | -0.004    | 0.019     | #> +-------------+----------+-----------+-----------+ #> |             | (0.028)  | (0.047)   | (0.045)   | #> +-------------+----------+-----------+-----------+ #> | X           | 0.017    | 1.423***  | 1.457***  | #> +-------------+----------+-----------+-----------+ #> |             | (0.073)  | (0.076)   | (0.073)   | #> +-------------+----------+-----------+-----------+ #> | Z           | 0.294*** | 0.522***  | 0.518***  | #> +-------------+----------+-----------+-----------+ #> |             | (0.050)  | (0.078)   | (0.075)   | #> +-------------+----------+-----------+-----------+ #> | C           | 0.621*** |           |           | #> +-------------+----------+-----------+-----------+ #> |             | (0.032)  |           |           | #> +-------------+----------+-----------+-----------+ #> | M           | 0.290*** |           |           | #> +-------------+----------+-----------+-----------+ #> |             | (0.041)  |           |           | #> +-------------+----------+-----------+-----------+ #> | A           |          |           | 0.286***  | #> +-------------+----------+-----------+-----------+ #> |             |          |           | (0.047)   | #> +-------------+----------+-----------+-----------+ #> | B           |          |           | 0.011     | #> +-------------+----------+-----------+-----------+ #> |             |          |           | (0.044)   | #> +-------------+----------+-----------+-----------+ #> | Num.Obs.    | 400      | 400       | 400       | #> +-------------+----------+-----------+-----------+ #> | R2          | 0.938    | 0.832     | 0.846     | #> +=============+==========+===========+===========+ #> | + p < 0.1, * p < 0.05, ** p < 0.01, *** p <    | #> | 0.001                                          | #> +=============+==========+===========+===========+"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_roles.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty-print node classifications (aligned) — print.DAGassist_roles","title":"Pretty-print node classifications (aligned) — print.DAGassist_roles","text":"Pretty-print node classifications (aligned)","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_roles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty-print node classifications (aligned) — print.DAGassist_roles","text":"","code":"# S3 method for class 'DAGassist_roles' print(x, n = Inf, ...)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_roles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty-print node classifications (aligned) — print.DAGassist_roles","text":"x Output classify_nodes() (class \"DAGassist_roles\") n Max rows print (default ) ... (ignored)","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_roles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty-print node classifications (aligned) — print.DAGassist_roles","text":"Invisibly returns x NOTE: eventually need modify make latex/kable compatible, now, just console output fine","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal, clean printout for validation results with color coding — print.DAGassist_validation","title":"Minimal, clean printout for validation results with color coding — print.DAGassist_validation","text":"Minimal, clean printout validation results color coding","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal, clean printout for validation results with color coding — print.DAGassist_validation","text":"","code":"# S3 method for class 'DAGassist_validation' print(x, n = 10, ...)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal, clean printout for validation results with color coding — print.DAGassist_validation","text":"x list (class ) validate_spec n Max number issues show (default 10). ... Ignored.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/print.DAGassist_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal, clean printout for validation results with color coding — print.DAGassist_validation","text":"Invisibly returns x.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_collider.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo DAG with a collider — test_collider","title":"Demo DAG with a collider — test_collider","text":"Demo DAG collider","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_collider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo DAG with a collider — test_collider","text":"","code":"test_collider"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_collider.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo DAG with a collider — test_collider","text":"dagitty object nodes: X,Y,C","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_collider.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo DAG with a collider — test_collider","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo DAG with confounder, mediator, collider — test_complex","title":"Demo DAG with confounder, mediator, collider — test_complex","text":"Demo DAG confounder, mediator, collider","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo DAG with confounder, mediator, collider — test_complex","text":"","code":"test_complex"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_complex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo DAG with confounder, mediator, collider — test_complex","text":"dagitty object nodes: X,Y,Z,M,C,","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_complex.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo DAG with confounder, mediator, collider — test_complex","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_confounder.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo DAG with a confounder — test_confounder","title":"Demo DAG with a confounder — test_confounder","text":"Demo DAG confounder","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_confounder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo DAG with a confounder — test_confounder","text":"","code":"test_confounder"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_confounder.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo DAG with a confounder — test_confounder","text":"dagitty object nodes: X,Y,Z","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_confounder.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo DAG with a confounder — test_confounder","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_cycle.html","id":null,"dir":"Reference","previous_headings":"","what":"Cyclic DAG used to trigger acyclicity errors — test_cycle","title":"Cyclic DAG used to trigger acyclicity errors — test_cycle","text":"Cyclic DAG used trigger acyclicity errors","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_cycle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cyclic DAG used to trigger acyclicity errors — test_cycle","text":"","code":"test_cycle"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_cycle.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cyclic DAG used to trigger acyclicity errors — test_cycle","text":"dagitty object variables X,Y,Z","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_cycle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cyclic DAG used to trigger acyclicity errors — test_cycle","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_dags.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DAGs for demos and tests — test_dags","title":"Example DAGs for demos and tests — test_dags","text":"Three tiny DAGs: confounder case, collider, mediator. stored dagitty DAG objects.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_dags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example DAGs for demos and tests — test_dags","text":"object dagitty DAG.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_dags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example DAGs for demos and tests — test_dags","text":"test_confounder: U -> X, U -> Y, X -> Y test_collider:  X -> C <- Y test_mediator:  X -> M -> Y","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_dags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example DAGs for demos and tests — test_dags","text":"","code":"data(test_confounder, package = \"DAGassist\") test_confounder #> dag { #> X [exposure] #> Y [outcome] #> Z #> X -> Y #> Z -> X #> Z -> Y #> }"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo data frame consistent with demo DAG — test_df","title":"Demo data frame consistent with demo DAG — test_df","text":"Demo data frame consistent demo DAG","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo data frame consistent with demo DAG — test_df","text":"","code":"test_df"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo data frame consistent with demo DAG — test_df","text":"data frame 400 rows 6 variables: X, Y, Z, C, M, .","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo data frame consistent with demo DAG — test_df","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_mediator.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo DAG with a confounder — test_mediator","title":"Demo DAG with a confounder — test_mediator","text":"Demo DAG confounder","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_mediator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo DAG with a confounder — test_mediator","text":"","code":"test_mediator"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_mediator.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demo DAG with a confounder — test_mediator","text":"dagitty object nodes: X,Y,M","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_mediator.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demo DAG with a confounder — test_mediator","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG with two minimal adjustment sets — test_multimin","title":"DAG with two minimal adjustment sets — test_multimin","text":"DAG two minimal adjustment sets","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG with two minimal adjustment sets — test_multimin","text":"","code":"test_multimin"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAG with two minimal adjustment sets — test_multimin","text":"dagitty object variables M,W,X,Y,Z","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DAG with two minimal adjustment sets — test_multimin","text":"Simulated examples package","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin4.html","id":null,"dir":"Reference","previous_headings":"","what":"DAG with four minimal adjustment sets — test_multimin4","title":"DAG with four minimal adjustment sets — test_multimin4","text":"DAG four minimal adjustment sets","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAG with four minimal adjustment sets — test_multimin4","text":"","code":"test_multimin4"},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAG with four minimal adjustment sets — test_multimin4","text":"dagitty object variables M,N,W,X,Y,Z","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/test_multimin4.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DAG with four minimal adjustment sets — test_multimin4","text":"Simulated examples package.","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/update_to_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"update formula Update a formula to use chosen controls NOTE: this will be used later when we compute minimal and canonical adjustment sets — update_to_controls","title":"update formula Update a formula to use chosen controls NOTE: this will be used later when we compute minimal and canonical adjustment sets — update_to_controls","text":"update formula Update formula use chosen controls NOTE: used later compute minimal canonical adjustment sets","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/update_to_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"update formula Update a formula to use chosen controls NOTE: this will be used later when we compute minimal and canonical adjustment sets — update_to_controls","text":"","code":"update_to_controls(exposure, outcome, controls = character(0))"},{"path":"https://grahamgoff.github.io/DAGassist/reference/update_to_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"update formula Update a formula to use chosen controls NOTE: this will be used later when we compute minimal and canonical adjustment sets — update_to_controls","text":"exposure Character; exposure variable name. outcome Character; outcome variable name. controls Character vector controls (default empty).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/validate_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","title":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","text":"Validate dag, formula, data fitting ensure exposure outcome specified","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/validate_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","text":"","code":"validate_spec(dag, formula, data, exposure, outcome)"},{"path":"https://grahamgoff.github.io/DAGassist/reference/validate_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","text":"dag dagitty DAG object. formula regression call data data frame exposure Character; exposure node name (X). outcome Character; outcome node name (Y).","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/validate_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","text":"list class DAGassist_validation values: ok (logical), issues (data.frame), vars (list)","code":""},{"path":"https://grahamgoff.github.io/DAGassist/reference/validate_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate dag, formula, data before fitting and ensure exposure and outcome are specified — validate_spec","text":"","code":"# Load small demo DAG and data shipped with the package data(test_complex, package = \"DAGassist\") data(test_df,      package = \"DAGassist\")  # example of what to do: everything present and consistent v_ok <- validate_spec(test_complex, Y ~ X + Z, test_df,                       exposure = \"X\", outcome = \"Y\") v_ok #> DAGassist validation: VALID #> No issues detected.  ##common mistake: a variable in the formula is missing from the data partial_df <- test_df[c(\"Y\", \"X\")] v_missing <- validate_spec(test_complex, Y ~ X + Z, partial_df,                            exposure = \"X\", outcome = \"Y\") v_missing #> DAGassist validation: INVALID #> Issues: 1 error(s), 0 warning(s) #> - [error] Z - Variable in formula not found in data. (missing_in_data)   ##another common issue: exposure not on the right-hand side (warns) v_warn <- validate_spec(test_complex, Y ~ Z, test_df,                         exposure = \"X\", outcome = \"Y\") v_warn #> DAGassist validation: VALID #> Issues: 0 error(s), 1 warning(s) #> - [warn] X - Exposure is not on the right-hand side of the formula. (formula_exposure_missing)   # 4) (Not run) Example that would error: DAG is not a dagitty object # \\dontrun{ #   validate_spec(list(), Y ~ X, test_df, exposure = \"X\", outcome = \"Y\") # }"},{"path":[]},{"path":"https://grahamgoff.github.io/DAGassist/news/index.html","id":"added-0-2-1","dir":"Changelog","previous_headings":"","what":"Added","title":"DAGassist 0.2.1","text":"variable labels across roles + model tables (LaTeX, .docx, .xlsx, .txt). unevaluated regressors note: list RHS terms DAG, shown outputs. keep factor dummies fixed effects default. better longtblr conversion/spacing; improved dynamic column width weighting line breaking long labels. auto-escape labels neat output. cleaner summaries label support. ## Changed consolidated helpers (assist_helpers.R + export_helpers.R). improved handling nuisance vars (FEs/tails). significantly improved documentation prep CRAN release. broader validation real replication data.","code":""},{"path":[]},{"path":"https://grahamgoff.github.io/DAGassist/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"DAGassist 0.2.0","text":"Renamed main entry point dag_assist() DAGassist().","code":""},{"path":"https://grahamgoff.github.io/DAGassist/news/index.html","id":"added-0-2-0","dir":"Changelog","previous_headings":"","what":"Added","title":"DAGassist 0.2.0","text":"Acyclicity checks clearer validation messages validate.R. Canonical adjustment sets alongside minimal sets. Support multiple minimal adjustment sets. Export LaTeX, Word (.docx), Excel (.xlsx), plain text (.txt). export_report() helper produce publication-grade, half-page robustness report single call. New imply parameter control DAG-implied covariate additions","code":""},{"path":"https://grahamgoff.github.io/DAGassist/news/index.html","id":"changed-0-2-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"DAGassist 0.2.0","text":"Console report redesigned compact, readable tables Nicer console styling color","code":""},{"path":"https://grahamgoff.github.io/DAGassist/news/index.html","id":"notes-0-2-0","dir":"Changelog","previous_headings":"","what":"Notes","title":"DAGassist 0.2.0","text":"Fixed-effects / IV parts formulas (e.g., | region + time) preserved; validation looks pre-| part.","code":""}]
